{% liquid
# fetch token and get user data
assign get_token_request = "{}" | parse_json
hash_assign get_token_request["client_id"] = provider.client_id
hash_assign get_token_request["client_secret"] = provider.secret_value
hash_assign get_token_request["code"] = context.params.code

# get access token
function token_body = "modules/user/queries/api_call", api_template: "modules/oauth_github/oauth/get_token", data: get_token_request
assign token_body = token_body | dig: "response", "body" | parse_json
assign access_token = token_body.access_token

assign result = "{}" | parse_json
hash_assign result["valid"] = false

if access_token
    return result
endif

# get user info
assign request_data = "{}" | parse_json
hash_assign request_data["access_token"] = access_token

function user_info = "modules/user/queries/api_call", api_template: "modules/oauth_github/oauth/user_info", data: request_data
assign user_info = user_info | dig: "response", "body" | parse_json

if user_info.email == null
    function user_emails = "modules/user/queries/api_call", api_template: "modules/oauth_github/oauth/user_email", data: request_data
    assign user_emails = user_emails | dig: "response", "body" | parse_json
    for email in user_emails
        if email.primary == true
            hash_assign user_info["email"] = email.email
        endif
    endfor
endif

assign name = user_info.name | split: ' '
hash_assign result["first_name"] = name[0] | default: user_info.login
hash_assign result["last_name"] = name[1] | default: ''
hash_assign result["sub"] = user_info.id
hash_assign result["email"] = user_info.email

if result.sub != null and result["email"] != null
    hash_assign result["valid"] = true
endif

return result
%}