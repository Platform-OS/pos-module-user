---
method: get
slug: oauth/:provider/callback
---
{% liquid
  function current_user = 'modules/user/queries/user/current'
  assign state = context.session.state
  log current_user, type: "D"
  if context.params.code == blank or context.params.provider == blank or context.params.state != state
    function _ = 'modules/user/helpers/flash', notice: 'modules/user/oauth.invalid_request'
    redirect_to '/'
  endif

  function available_providers = 'modules/user/helpers/get_available_oauth_providers'
  assign provider = context.params.provider | upcase
  assign selected_provider = available_providers[provider]
  
  if selected_provider == blank
    redirect_to '/'
  endif

  # check if user already has a given provider
  if current_user.id != blank
    log current_user, type: "D"
    graphql g = 'modules/user/oauth/find_by_user_id', provider: provider, user_id: current_user.id
    log g, type: 'DEBUG'
    if g.records.total_entries > 0
      log "Provider already assigned to user", type: "INFO"
      function _ = 'modules/user/helpers/flash', notice: 'modules/user/oauth.provider_already_assigned'
      redirect_to '/'
    endif
  endif

  # fetch token and user data
  assign data = "{}" | parse_json
  hash_assign data['url'] = selected_provider.token_url
  hash_assign data['client_id'] = selected_provider.client_id
  hash_assign data['client_secret'] = selected_provider.secret_value
  hash_assign data['code'] = context.params.code
  
  function token_body = 'modules/user/queries/api_call', api_template: 'modules/user/oauth/get_token', data: data
  assign token_body = token_body | dig: "response", "body" | parse_json
  hash_assign token_body['url'] = selected_provider.user_url
  
  function user_info = 'modules/user/queries/api_call', api_template: 'modules/user/oauth/user_info', data: token_body
  assign user_info = user_info | dig: "response", "body" | parse_json
  assign user_sub = user_info.id | json

  # check if sub is already registered to an existing user
  graphql g = 'modules/user/oauth/find_by_sub', provider: provider, sub: user_sub
  assign found_user_id = current_user.id
  assign create_provider_assignment = true
  if g.records.total_entries > 0
    if current_user.id != null
      log "Sub already assigned to user", type: "INFO"
      function _ = 'modules/user/helpers/flash', notice: 'modules/user/oauth.sub_already_assigned'
      redirect_to '/'
    else
      assign found_user_id = g.records.results[0].user_id
      assign create_provider_assignment = false
    endif
  endif

  # check if user account should be created
  if current_user.id == null and found_user_id == null
    log "Creating new user", type: "T"
    assign password = 30 | random_string
    assign full_name = user_info.given_name | append: ' ' | append: user_info.family_name
    assign object = '{}' | parse_json | hash_merge: email: user_info.email
    assign object = object | hash_merge: firstName: user_info.given_name, lastName: user_info.family_name, fullName: full_name
    
    function new_user = 'modules/user/commands/user/create', email: user_info.email , password: password, hook_params: object
    if new_user.valid == false
      function _ = 'modules/user/helpers/flash', notice: 'modules/user/oauth.failed_to_create_account'
      log new_user.errors, type: "ERROR"
      redirect_to '/'
    endif
    assign found_user_id = new_user.id
  endif

  # create a connection between user and provider
  if create_provider_assignment
    graphql g = 'modules/user/oauth/create', sub: user_sub, provider: provider, user_id: found_user_id
    log "Provider assigned to user", type: "INFO"
  endif
  
  #sign in as user
  if current_user.id == blank
    function _ = 'modules/user/commands/session/create', user_id: found_user_id, validate_password: false
    log "User signed in with OAuth 2", type: "INFO"
    function _ = 'modules/user/helpers/flash', notice: 'modules/user/oauth.signed_in'
  else
    function _ = 'modules/user/helpers/flash', notice: 'modules/user/oauth.assigned_provider'
  endif

  redirect_to '/'
%}
