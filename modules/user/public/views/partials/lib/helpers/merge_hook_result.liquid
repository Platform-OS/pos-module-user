{% comment %}
  Merge the array of hook results into a single object.
  Params:
    - results: array
      Example
      [
        {
          "property1": "value1",
          "property2": "value2",
          "errors": {
            "property1": ["Something is wrong with 'value1'"]
          }
          "valid": false
        }
        {
          "property1": "value1",
          "property2": "value2",
          "errors": {
            "property1": ["Another problem with 'value1'"],
            "property2": ["Something is wrong with 'value2'"]
          }
          "valid": false
        },
        {
          "property1": "value1",
          "property2": "value2",
          "errors": {}
          "valid": true
        }
      ]
  Return:
    Example
    {
      "errros": {
        "property1": ["Something is wrong with 'value1'", "Another problem with 'value1'"],
        "property2": ["Something is wrong with 'value2'"]
      },
      "valid": false,
      "property1": "value1",
      "property2": "value2"
    }
{% endcomment %}
{% liquid
  assign merged = '{"errors": {}, "valid": true}' | parse_json
  for result in results
    # copy all properties from result, except the computed values: "errors", "valid"
    assign tmp = result | deep_clone
    assign _ = tmp | hash_delete_key: 'errors'
    assign _ = tmp | hash_delete_key: 'valid'
    assign merged = merged | hash_merge: tmp

    # compute the merged value of "valid"
    assign is_valid = true
    if result.valid != nil
      assign is_valid = result.valid
    endif
    unless merged['valid'] and is_valid
      hash_assign merged['valid'] = false
    endunless

    # compute the merged value of "errors"
    assign keys = result.errors | hash_keys
    for key in keys
      assign value = merged['errors'][key] | default: '[]' | parse_json | array_add: result.errors[key]
      hash_assign merged['errors'][key] = value | array_flatten
    endfor
  endfor

  return merged
%}
