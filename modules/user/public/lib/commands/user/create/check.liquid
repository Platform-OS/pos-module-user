{% liquid
  assign c = '{ "errors": {}, "valid": true }' | parse_json

  function c = 'modules/core/validations/presence', c: c, object: object, field_name: 'password'
  function c = 'modules/core/validations/password_complexity', c: c, object: object, field_name: 'password', key: null
  function c = 'modules/core/validations/presence', c: c, object: object, field_name: 'email', key: 'modules/user/validation.email.required'
  function c = 'modules/core/validations/length', c: c, object: object, field_name: 'roles', minimum: 0, allow_blank: true
  function c = 'modules/core/validations/email', c: c, object: object, field_name: 'email', key: 'modules/user/validation.email.format'

  if object.email != blank
    graphql user_exists = 'modules/user/user/list', email: object.email
    if user_exists.users.total_entries > 0
      assign message = 'modules/user/validation.user_exists' | t
      function c = 'modules/core/helpers/register_error', contract: c, field_name: 'email', message: message
    endif
  endif

  hash_assign object['valid'] = c.valid
  hash_assign object['errors'] = c.errors

  return object
%}
