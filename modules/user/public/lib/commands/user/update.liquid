{% comment %}
  Updates a user.
  Params:
    - id: string
    - email: string
      the user's email address
    - password: string
      the user's password
    - hook_params: object
      the other params that will be passed to hook_user_update
{% endcomment %}
{% liquid
  function object = 'modules/user/commands/user/update/build', id: id, email: email, password: password
  function object = 'modules/user/commands/user/update/check', object: object

  if object.valid
    graphql user = 'modules/user/user/update', args: object
    hash_assign object['update_result'] = user
    unless user.errors
      assign params = '{}' | parse_json | hash_merge: updated_user: user.user, hook_params: hook_params
      # todo: merge_to_object for hooks with the same name will overwrite the validity of previous results
      function results = 'modules/core/commands/hook/fire', hook: 'user_update', params: params, merge_to_object: true
      for result in results
        # using the errors key for a quick workaround for now
        if result[1].valid == false or result[1].errors != blank
          hash_assign object['valid'] = false
          hash_assign object['errors'] = result[1].errors
          break
        endif
      endfor
      hash_assign object['hook_results'] = results
    endunless

    assign event_payload = null | hash_merge: user_id: object.id
    function _ = 'modules/core/commands/events/publish', type: 'user_updated', object: event_payload, delay: null, max_attempts: null
  endif

  return object
%}
