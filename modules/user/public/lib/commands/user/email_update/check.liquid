{% liquid
  assign c = '{ "errors": {}, "valid": true }' | parse_json
  function c = 'modules/core/validations/presence', c: c, object: object, field_name: 'email'
  function c = 'modules/core/validations/email', c: c, object: object, field_name: 'email'
  if object.email != blank and object.email != current_user.email
    graphql emails_count = 'modules/user/user/emails_count', email: object.email | dig: 'users', 'total_entries'
    if emails_count > 0
      render 'modules/core/helpers/register_error', contract: c, field_name: 'email', key: 'app.errors.taken'
    endif
  endif

  function c = 'modules/core/validations/presence', c: c, object: object, field_name: 'password'
  if object.password
    function r = 'modules/core/commands/execute', mutation_name: 'modules/user/user/verify_password_for_user_id' object: object, selection: 'users'
    assign user = r.results.first

    function c = 'modules/core/validations/truthy', c: c, field_name: 'password', object: user.authenticate, key: 'app.errors.invalid_password'
  endif

  assign object = object | hash_merge: valid: c.valid, errors: c.errors

  return object
%}
